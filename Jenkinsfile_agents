pipeline {
    agent none

    stages {
        stage('Get Code') {
           agent { label 'git' }
            steps {
                echo "Hacemos Checkout"
                git url: 'https://github.com/danielcch/helloworld.git'
                sh '''
                    whoami
                    hostname
                    echo ${WORKSPACE}
                '''
                stash name: 'codigo', includes: '**/*'
            }
        }

        stage('Build') {
            agent { label 'build' }
            steps {
                unstash 'codigo'
                echo "Etapa construcci√≥n: No se compila nada de monto en python"
                sh '''
                    whoami
                    hostname
                    echo ${WORKSPACE}
                '''
                stash name: 'build',includes: '**/*'
            }
        }

        stage('Test') {
            parallel {
                stage('Unit') {
                    agent { label 'tests' }
                    steps {
                        unstash 'build'
                        sh '''
                            whoami
                            hostname
                            echo ${WORKSPACE}
                            export PYTHONPATH=.
                            export FLASK_APP=app/api.py:api_application
                            pytest --junitxml=result-unit.xml test/unit
                        '''
                    }
                    post {
                        always {
                            stash name: 'results-unit', includes: 'result-*.xml', allowEmpty: true
                        }
                    }
                }//fin unit
                stage('Service') {
                    agent { label 'tests' }
                    steps {
                        unstash 'build'
                        catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                            sh '''
                                whoami
                                hostname
                                echo ${WORKSPACE}
                                export PYTHONPATH=.
                                export FLASK_APP=app/api.py:api_application
                                PORT_FLASK=$(python3 -c "import socket; s=socket.socket(); s.bind(('',0)); print(s.getsockname()[1]); s.close()")
                                PORT_WIREMOCK=$(python3 -c "import socket; s=socket.socket(); s.bind(('',0)); print(s.getsockname()[1]); s.close()")
                                flask run --port=$PORT_FLASK &
                                FLASK_PID=$!
                                java -jar /tools/wiremock/wiremock-standalone-2.27.2.jar --port $PORT_WIREMOCK --root-dir /tools/wiremock/ -v &
                                WIREMOCK_PID=$!
                                trap 'kill $FLASK_PID $WIREMOCK_PID || true' EXIT
                                for i in {1..1000}; do curl -s http://localhost:$PORT_FLASK && break || sleep 1; done
                                for i in {1..1000}; do curl -s http://localhost:$PORT_WIREMOCK && break || sleep 1; done
                                
                                export BASE_URL_ENV=http://localhost:$PORT_FLASK
                                export BASE_URL_MOCK_ENV=http://localhost:$PORT_WIREMOCK
                                pytest --junitxml=result-unint-rest.xml test/rest
                            '''
                        }
                    }
                    post {
                        always {
                            stash name: 'results-rest', includes: 'result-*.xml', allowEmpty: true
                        }
                    }
                }
            }
        }

        stage('Results') {
            agent { label 'results' }
            steps {
                unstash 'results-unit'
                unstash 'results-rest'
                sh '''
                    whoami
                    hostname
                    echo ${WORKSPACE}
                '''
                junit 'result*.xml'
            }
        }
    }
}
